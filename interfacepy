import tkinter as tk

# Inicializa variáveis globais
drawing_mode = 'line_bresenham'  # Modos: 'line_bresenham', 'circle_bresenham'
points = []

def set_pixel(canvas, x, y, color='red'):
    """Desenha um pixel no canvas."""
    canvas.create_rectangle(x, y, x+1, y+1, outline=color, fill=color)

def line_dda(canvas, x0, y0, xEnd, yEnd):
    dx = xEnd - x0
    dy = yEnd - y0
    steps = max(abs(dx), abs(dy))
    x_increment = dx / steps
    y_increment = dy / steps
    x = x0
    y = y0
    
    for _ in range(int(steps)):
        set_pixel(canvas, round(x), round(y))
        x += x_increment
        y += y_increment

def line_bresenham(canvas, x0, y0, xEnd, yEnd):
    """Desenha uma linha usando o algoritmo de Bresenham."""
    dx = abs(xEnd - x0)
    dy = abs(yEnd - y0)
    sx = 1 if xEnd - x0 > 0 else -1
    sy = 1 if yEnd - y0 > 0 else -1
    err = dx - dy

    while True:
        set_pixel(canvas, x0, y0)
        if x0 == xEnd and y0 == yEnd:
            break
        e2 = 2 * err
        if e2 > -dy:
            err -= dy
            x0 += sx
        if e2 < dx:
            err += dx
            y0 += sy

def plot_point(canvas, xc, yc, x, y):
    """Desenha pontos em todas as oitavas a partir de um centro."""
    points = [
        (xc+x, yc+y), (xc+x, yc-y), (xc+y, yc+x), (xc+y, yc-x),
        (xc-x, yc-y), (xc-y, yc-x), (xc-x, yc+y), (xc-y, yc+x)
    ]
    for point in points:
        set_pixel(canvas, *point)

def circle_bresenham(canvas, xc, yc, r):
    """Desenha um círculo usando o algoritmo de Bresenham."""
    x, y = 0, r
    pk = 5/4 - r
    plot_point(canvas, xc, yc, x, y)
    while x < y:
        x += 1
        if pk < 0:
            pk += 2*x + 1
        else:
            y -= 1
            pk += 2*(x - y) + 1
        plot_point(canvas, xc, yc, x, y)

def on_click(event):
    """Manipula cliques no canvas."""
    global points
    canvas = event.widget
    point = (event.x, event.y)
    points.append(point)
    if drawing_mode == 'circle_bresenham' and len(points) == 1:
        # Para círculos, o primeiro clique define o centro, o segundo define o raio
        return
    elif len(points) == 2:
        if drawing_mode == 'line_bresenham':
            line_bresenham(canvas, *points[0], *points[1])
        elif drawing_mode == 'circle_bresenham':
            r = int(((points[0][0] - points[1][0]) ** 2 + (points[0][1] - points[1][1]) ** 2) ** 0.5)
            circle_bresenham(canvas, *points[0], r)
        points.clear()

def set_drawing_mode(mode):
    """Define o modo de desenho."""
    global drawing_mode
    drawing_mode = mode
    points.clear()

def clear_canvas():
    """Limpa o canvas."""
    canvas.delete("all")
    points.clear()  

if __name__ == "__main__":
    root = tk.Tk()
    root.title("Drawing Application")

    canvas = tk.Canvas(root, width=800, height=600, bg='white')
    canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
    canvas.bind("<Button-1>", on_click)

    frame = tk.Frame(root)
    frame.pack(side=tk.BOTTOM, fill=tk.X)

    modes = [
        ('Line (Bresenham)', 'line_bresenham'),
        ('Circle (Bresenham)', 'circle_bresenham'),
        ('Clear Canvas', 'clear'),
        ('DDA Line', 'line_dda')
    ]
 
    for text, mode in modes:
        btn_command = lambda m=mode: clear_canvas() if m == 'clear' else set_drawing_mode(m)
        btn = tk.Button(frame, text=text, command=btn_command)
        btn.pack(side='left')

    root.mainloop()
